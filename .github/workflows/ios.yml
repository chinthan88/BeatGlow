name: iOS CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    name: Build and Test using Xcode 16.4
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'     # fallback: 'latest-stable'

      - name: Check Xcode version
        run: xcodebuild -version

      - name: Determine default scheme
        id: scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "default_scheme=$default" >> $GITHUB_OUTPUT

      - name: Build for Testing
        run: |
          scheme="${{ steps.scheme.outputs.default_scheme }}"
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ -f *.xcworkspace ]; then
            filetype="-workspace *.xcworkspace"
          else
            filetype="-project *.xcodeproj"
          fi
          eval xcodebuild build-for-testing $filetype -scheme "$scheme" -destination "platform=iOS Simulator,name=$device"

      - name: Run Tests
        run: |
          scheme="${{ steps.scheme.outputs.default_scheme }}"
          device=$(xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//")
          if [ -f *.xcworkspace ]; then
            filetype="-workspace *.xcworkspace"
          else
            filetype="-project *.xcodeproj"
          fi
          eval xcodebuild test-without-building $filetype -scheme "$scheme" -destination "platform=iOS Simulator,name=$device"
